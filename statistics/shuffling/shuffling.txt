How do you shuffle? Is it a fair shuffle? More importantly, how do we know? 

When rolling dice, it is fairly straightforward to understand whether they are fair dice. We simply roll them a large number of times and check the frequency of appearances of the values. We may need a further check to see that the values are appropriately scattered. In other words, we want to guard against 1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6 which has a perfect (too perfect!) frequency of values, but it is certainly not random. So we might take subsequences and check their frequencies or computer runs and gaps, etc. See the simulation post. 

But for a shuffled deck, we cannot quite do this. The raw object is, of course, a specific placement of the cards in the deck. Each such placement is equally likely and there are 52!~~8E67 such possibilities. That is a number with 67 digits. We are not going to be simulating that! So how do we get a handle on it? We will explore several options in  this post and see what works.

One option is to compute how much each card has changed its position, either from the original position or relative to its neighbors. We will call this the Delta approach. 

Another idea is to compute the gaps&runs in appearances of ranks and suits. This can be generalized to any list of items by assigning numbers to the items and computing gaps&runs by computing the quotient or remainder after dividing by a chosen number; we can divide the numbers 1 to 52 by 4 to simulate ranks (quotient) and suits (remainder). By varying the divisor, we have a better chance of detecting bias. This method we call the Gaps&Runs approach. 

Both of those deal with the question of randomness devoid from an application. Our final approach to investigate will be computing the frequencies of poker hands in the deck. If our concern for shuffling was poker, this would be an appropriate simulation to run. An even better simulation is deal out several hands and then simulate the possible decisions players might make and see what the results are. On top of that, one would want to do repeated rounds shuffling the deck as reassembled after the end of a round. In this way, we can test whether a shuffling algorithm can mutate the odds eventually. We call this Game Simulation.

Our plan is the following. Using some functions from the simulation post, we illustrate two random shuffle techniques. We are using two so as to have cases to compare the statistics in a situation in which they should be the same. After the random shuffles, we discuss some other shuffling techniques that may or may not be random. Then we delve into the possible statistics we discussed above, first Delta and then Gaps&Runs. To discuss Game Simulation, we need to take a detour to figuring out how to recognize poker hands and adequate strategies to handle them. Hence, we will discuss that one in another post. 

NOTE: range, pickRange, frequencyCounter, are done in simulations. Footnote them. Maybe have a catalog of such functions, generated by load? 

